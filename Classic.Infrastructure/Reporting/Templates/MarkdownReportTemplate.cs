using Classic.Core.Interfaces;
using Classic.Core.Models;

namespace Classic.Infrastructure.Reporting.Templates;

/// <summary>
/// Markdown-based report template for better readability in markdown viewers.
/// </summary>
public class MarkdownReportTemplate : IReportTemplate
{
    public string Name => "Markdown";
    
    public string Description => "Markdown-formatted report for crash log analysis";
    
    public string FormatHeader(string fileName, string version)
    {
        return $"# Crash Log Analysis Report\n\n" +
               $"**File:** `{fileName}`\n" +
               $"**Generated by:** {version}\n" +
               $"**Date:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n\n" +
               "> ⚠️ **Note:** Please read everything carefully and beware of false positives.\n\n" +
               "---\n";
    }
    
    public string FormatError(string errorType, string errorMessage, object severity)
    {
        var severityBadge = GetSeverityBadge(severity);
        return $"{severityBadge} **{errorType}:** {errorMessage}";
    }
    
    public string FormatSuspect(string name, string description, object severity, string evidence = null, string recommendation = null)
    {
        var severityBadge = GetSeverityBadge(severity);
        var result = $"\n### {severityBadge} {name}\n\n";
        result += $"**Description:** {description}\n\n";
        
        if (!string.IsNullOrEmpty(evidence))
            result += $"**Evidence:** {evidence}\n\n";
            
        if (!string.IsNullOrEmpty(recommendation))
            result += $"**Recommendation:** {recommendation}\n\n";
            
        return result;
    }
    
    public string FormatPlugin(int loadOrder, string name, string status = null, string flags = null)
    {
        var result = $"- `[{loadOrder:X2}]` **{name}**";
        
        if (!string.IsNullOrEmpty(status))
            result += $"\n  - Status: `{status}`";
            
        if (!string.IsNullOrEmpty(flags))
            result += $"\n  - Flags: `{flags}`";
            
        return result + "\n";
    }
    
    public string FormatFormId(uint formId, byte pluginIndex, uint localFormId, string pluginName, string formType = null)
    {
        var result = $"- **FormID:** `{formId:X8}` [`{pluginIndex:X2}:{localFormId:X6}`]\n";
        result += $"  - Plugin: `{pluginName}`";
        
        if (!string.IsNullOrEmpty(formType))
            result += $"\n  - Type: `{formType}`";
            
        return result + "\n";
    }
    
    public string FormatSeparator()
    {
        return "\n---\n";
    }
    
    public string FormatSectionHeader(string title)
    {
        return $"\n## {title}\n";
    }
    
    public string FormatFooter(string version, DateTime date)
    {
        return $"\n---\n\n" +
               $"*Report generated by {version} on {date:yyyy-MM-dd HH:mm:ss}*\n\n" +
               "### Additional Resources\n\n" +
               "- [Crash Log Documentation](https://docs.google.com/document/d/17FzeIMJ256xE85XdjoPvv_Zi3C5uHeSTQh6wOZugs4c)\n" +
               "- [Buffout 4 NG](https://www.nexusmods.com/fallout4/mods/64879)\n" +
               "- [Crash Log Auto Scanner](https://www.nexusmods.com/fallout4/mods/56255)\n";
    }
    
    public string GetSeverityIcon(int severityScore)
    {
        return GetSeverityBadge(severityScore);
    }
    
    private string GetSeverityBadge(object severity)
    {
        // Handle numeric severity (1-6 scale, 6 being highest)
        if (severity is int numericSeverity)
        {
            return numericSeverity switch
            {
                6 => "![CRITICAL](https://img.shields.io/badge/CRITICAL-red?style=flat-square)",
                5 => "![SEVERE](https://img.shields.io/badge/SEVERE-orange?style=flat-square)",
                4 => "![HIGH](https://img.shields.io/badge/HIGH-yellow?style=flat-square)",
                3 => "![MEDIUM](https://img.shields.io/badge/MEDIUM-blue?style=flat-square)",
                2 => "![LOW](https://img.shields.io/badge/LOW-green?style=flat-square)",
                1 => "![INFO](https://img.shields.io/badge/INFO-lightgrey?style=flat-square)",
                _ => "![UNKNOWN](https://img.shields.io/badge/UNKNOWN-grey?style=flat-square)"
            };
        }
        
        // Handle SeverityLevel enum
        if (severity is SeverityLevel severityLevel)
        {
            return severityLevel switch
            {
                SeverityLevel.Critical => "![CRITICAL](https://img.shields.io/badge/CRITICAL-red?style=flat-square)",
                SeverityLevel.High => "![HIGH](https://img.shields.io/badge/HIGH-yellow?style=flat-square)",
                SeverityLevel.Medium => "![MEDIUM](https://img.shields.io/badge/MEDIUM-blue?style=flat-square)",
                SeverityLevel.Low => "![LOW](https://img.shields.io/badge/LOW-green?style=flat-square)",
                _ => "![UNKNOWN](https://img.shields.io/badge/UNKNOWN-grey?style=flat-square)"
            };
        }
        
        return "![UNKNOWN](https://img.shields.io/badge/UNKNOWN-grey?style=flat-square)";
    }
}