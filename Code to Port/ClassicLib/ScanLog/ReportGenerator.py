"""
Report generator module for CLASSIC.

This module handles report generation and formatting including:
- Creating report headers
- Formatting error sections
- Generating plugin suspect sections
- Formatting FormID sections
- Creating named record sections
- Generating settings validation results
- Creating report footers
"""

from typing import TYPE_CHECKING, Any

from ClassicLib import GlobalRegistry
from ClassicLib.ScanLog.ScanLogInfo import ClassicScanLogsInfo
from ClassicLib.Util import append_or_extend

if TYPE_CHECKING:
    from ClassicLib.ScanLog.ScanLogInfo import ClassicScanLogsInfo


class ReportGenerator:
    """Handles report generation and formatting for crash log analysis."""
    
    def __init__(self, yamldata: "ClassicScanLogsInfo") -> None:
        """
        Initialize the report generator.
        
        Args:
            yamldata: Configuration data
        """
        self.yamldata: ClassicScanLogsInfo = yamldata
        
    def generate_header(self, crashlog_filename: str, autoscan_report: list[str]) -> None:
        """
        Generate report header.
        
        Args:
            crashlog_filename: Name of the crash log file
            autoscan_report: List to append header content
        """
        append_or_extend(
            (
                f"{crashlog_filename} -> AUTOSCAN REPORT GENERATED BY {self.yamldata.classic_version} \n",
                "# FOR BEST VIEWING EXPERIENCE OPEN THIS FILE IN NOTEPAD++ OR SIMILAR # \n",
                "# PLEASE READ EVERYTHING CAREFULLY AND BEWARE OF FALSE POSITIVES # \n",
                "====================================================\n",
            ),
            autoscan_report,
        )
        
    def generate_error_section(  # noqa: PLR0913
        self, main_error: str, crashgen_version: str, version_current: Any, version_latest: Any, 
        version_latest_vr: Any, autoscan_report: list[str]
    ) -> None:
        """
        Format error information section.
        
        Args:
            main_error: Main crash error message
            crashgen_version: Detected crash generator version
            version_current: Current version object
            version_latest: Latest version object
            version_latest_vr: Latest VR version object
            autoscan_report: List to append formatted section
        """
        append_or_extend(
            (
                f"\nMain Error: {main_error}\n",
                f"Detected {self.yamldata.crashgen_name} Version: {crashgen_version} \n",
                (
                    f"* You have the latest version of {self.yamldata.crashgen_name}! *\n\n"
                    if version_current >= version_latest or version_current >= version_latest_vr
                    else f"{self.yamldata.warn_outdated} \n"
                ),
            ),
            autoscan_report,
        )
        
    @staticmethod
    def generate_suspect_section_header(autoscan_report: list[str]) -> None:
        """
        Generate suspect checking section header.
        
        Args:
            autoscan_report: List to append header
        """
        append_or_extend(
            (
                "====================================================\n",
                "CHECKING IF LOG MATCHES ANY KNOWN CRASH SUSPECTS...\n",
                "====================================================\n",
            ),
            autoscan_report,
        )
        
    @staticmethod
    def generate_suspect_found_footer(found_suspect: bool, autoscan_report: list[str]) -> None:
        """
        Generate footer for suspect section based on findings.
        
        Args:
            found_suspect: Whether any suspects were found
            autoscan_report: List to append footer
        """
        if found_suspect:
            append_or_extend(
                (
                    "* FOR DETAILED DESCRIPTIONS AND POSSIBLE SOLUTIONS TO ANY ABOVE DETECTED CRASH SUSPECTS *\n",
                    "* SEE: https://docs.google.com/document/d/17FzeIMJ256xE85XdjoPvv_Zi3C5uHeSTQh6wOZugs4c *\n\n",
                ),
                autoscan_report,
            )
        else:
            append_or_extend(
                (
                    "# FOUND NO CRASH ERRORS / SUSPECTS THAT MATCH THE CURRENT DATABASE #\n",
                    "Check below for mods that can cause frequent crashes and other problems.\n\n",
                ),
                autoscan_report,
            )
            
    @staticmethod
    def generate_settings_section_header(autoscan_report: list[str]) -> None:
        """
        Generate settings check section header.
        
        Args:
            autoscan_report: List to append header
        """
        append_or_extend(
            (
                "====================================================\n",
                "CHECKING IF NECESSARY FILES/SETTINGS ARE CORRECT...\n",
                "====================================================\n",
            ),
            autoscan_report,
        )
        
    @staticmethod
    def generate_mod_check_header(check_type: str, autoscan_report: list[str]) -> None:
        """
        Generate header for mod checking sections.
        
        Args:
            check_type: Type of mod check (e.g., "FREQUENT CRASHES", "CONFLICT")
            autoscan_report: List to append header
        """
        append_or_extend(
            (
                "====================================================\n",
                f"CHECKING FOR MODS THAT {check_type}...\n",
                "====================================================\n",
            ),
            autoscan_report,
        )
        
    @staticmethod
    def generate_plugin_suspect_header(autoscan_report: list[str]) -> None:
        """
        Generate plugin suspect section header.
        
        Args:
            autoscan_report: List to append header
        """
        append_or_extend(
            (
                "====================================================\n",
                "SCANNING THE LOG FOR SPECIFIC (POSSIBLE) SUSPECTS...\n",
                "====================================================\n",
                "# LIST OF (POSSIBLE) PLUGIN SUSPECTS #\n",
            ),
            autoscan_report,
        )
        
    @staticmethod
    def generate_formid_section_header(autoscan_report: list[str]) -> None:
        """
        Generate FormID section header.
        
        Args:
            autoscan_report: List to append header
        """
        append_or_extend(("\n# LIST OF (POSSIBLE) FORM ID SUSPECTS #\n",), autoscan_report)
        
    @staticmethod
    def generate_record_section_header(autoscan_report: list[str]) -> None:
        """
        Generate named record section header.
        
        Args:
            autoscan_report: List to append header
        """
        append_or_extend(("\n# LIST OF DETECTED (NAMED) RECORDS #\n",), autoscan_report)
        
    def generate_footer(self, autoscan_report: list[str]) -> None:
        """
        Generate report footer.
        
        Args:
            autoscan_report: List to append footer
        """
        if GlobalRegistry.get_game().replace(" ", "") == "Fallout4":
            append_or_extend(self.yamldata.autoscan_text, autoscan_report)
        append_or_extend(
            f"{self.yamldata.classic_version} | {self.yamldata.classic_version_date} | END OF AUTOSCAN \n", 
            autoscan_report
        )
        
    @staticmethod
    def generate_plugin_limit_warning(
            trigger_plugin_limit: bool, trigger_limit_check_disabled: bool,
        trigger_plugins_loaded: bool, autoscan_report: list[str]
    ) -> None:
        """
        Generate plugin limit warning if applicable.
        
        Args:
            trigger_plugin_limit: Whether plugin limit was detected
            trigger_limit_check_disabled: Whether limit check is disabled
            trigger_plugins_loaded: Whether plugins were loaded
            autoscan_report: List to append warning
        """
        if trigger_plugin_limit and not trigger_limit_check_disabled and trigger_plugins_loaded:
            append_or_extend(
                ("# 💀 CRITICAL : THE '[FF]' PLUGIN PREFIX MEANS YOU REACHED THE PLUGIN LIMIT OF 254 PLUGINS # \n",), 
                autoscan_report
            )
        elif trigger_plugin_limit and trigger_limit_check_disabled and trigger_plugins_loaded:
            append_or_extend(
                (
                    "# ⚠️ WARNING : THE '[FF]' PLUGIN PREFIX WAS DETECTED BUT PLUGIN LIMIT CHECK IS DISABLED. # \n",
                    "This could indicates that your version of Buffout 4 NG is out of date. \n",
                    "Recommendation: Consider updating Buffout 4 NG to the latest version. \n-----\n",
                ),
                autoscan_report,
            )
            
    @staticmethod
    def generate_plugins_loading_failure_message() -> tuple[str, ...]:
        """
        Generate message for plugin loading failure.
        
        Returns:
            Tuple of message lines
        """
        return ((
            "* [!] NOTICE : BUFFOUT 4 WAS NOT ABLE TO LOAD THE PLUGIN LIST FOR THIS CRASH LOG! *\n",
            "  CLASSIC cannot perform the full scan. Provide or scan a different crash log\n",
            "  OR copy-paste your *loadorder.txt* into your main CLASSIC folder.\n"
        ))